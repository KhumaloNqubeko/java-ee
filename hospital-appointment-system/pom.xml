<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>name.abhijitsarkar.maven</groupId>
    <artifactId>maven-parent</artifactId>
    <version>2.0</version>
  </parent>
  <groupId>name.abhijitsarkar.javaee.microservices</groupId>
  <artifactId>hospital-appointment-system</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>hospital-appointment-system</name>

  <description>
  A basic example of the Richardson Maturity Model a.k.a. RMM and HATEOAS. Our problems domain is a hospital 
  appointment system as follows:
  
  # Patients can query for open slots with a hospital for a particular day. In response, they receive a list of 
  slots that're open on that day, with the name of a doctor that's available for a particular slot. If no slots are
  available on the requested date, they get an appropriate HTTP response.
  
  # Given a slot information, a client can either book an appointment, find more information about the doctor
  or request for the next slot. Requesting next slot assumes the same day. If a successful appointment is
  booked, the client receives a link to view or cancel the appointment. If for some reason the appointment booking
  failed, they get an appropriate HTTP response.
  
  Note: To book an appointment, a client must already be registered with the hospital; 
  registration is outside the scope of our system.
  
  The response is of type 'application/hal+json'. HAL is built using HalBuilder. 
  Links to the HAL spec, IANA-registered link relations and HalBuilder can be found in the 'References' section.
  
  References:
  http://martinfowler.com/articles/richardsonMaturityModel.html
  http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven
  http://stateless.co/hal_specification.html
  https://www.iana.org/assignments/link-relations/link-relations.xhtml
  https://github.com/HalBuilder
  
  My design as as follows:
  
  GET /slot -> If slots are available, lists of all slots for current date. 
    Returns HTTP status code 200. If no slots are available, returns HTTP status code 404.  
  Date is according to the hospital.
  
  GET /slot?date=20150101 -> Response similar to above, except for the date is provided by the patient.
  
  GET /slot/1 -> Returns slot that has an id 1. Returns HTTP status code 200.
    If slot isn't found, HTTP status code 404.
    
  POST /appointment/1 -> Creates an appointment for slot that that has an id 1. Returns HTTP status code 201.
    If slot isn't found, returns HTTP status code 404.
  
  GET /appointment/1 -> Returns appointment that has an id 1. Returns HTTP status code 200.
    If appointment isn't found, HTTP status code 404.
      
  DELETE /appointment/1 -> Cancels an appointment that has an id 1. Returns HTTP status code 200.
    If appointment isn't found, HTTP status code 404.
    
  GET /doctor/1 -> Returns doctor whose id is 1. Returns HTTP status code 200. 
    If doctor isn't found, HTTP status code 404.
  </description>

  <properties>
    <project.build.sourceLevel>1.8</project.build.sourceLevel>
    <project.build.targetLevel>1.8</project.build.targetLevel>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <wildfly.plugin.version>1.0.2.Final</wildfly.plugin.version>
    <war.plugin.version>2.6</war.plugin.version>
    <compiler.plugin.version>3.2</compiler.plugin.version>
    <wildfly.version>8.2.0.Final</wildfly.version>
    <wildfly.unpackDir>${java.io.tmpdir}</wildfly.unpackDir>
    <wildfly.home>${wildfly.unpackDir}/wildfly-${wildfly.version}</wildfly.home>
    <arquillan.version>1.1.7.Final</arquillan.version>
    <shrinkwrap.version>2.1.0</shrinkwrap.version>
    <integrationTest.pattern>**/*IntegrationTest.java</integrationTest.pattern>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.theoryinpractise</groupId>
      <artifactId>halbuilder-standard</artifactId>
      <version>4.0.1</version>
      <!-- Exclude Jackson to avoid any conflict with the one bundled with Wildfly -->
      <exclusions>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>jaxrs-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.spec.javax.json</groupId>
      <artifactId>jboss-json-api_1.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-client</artifactId>
      <scope>provided</scope>
    </dependency>
    <!-- Use Jackson instead of Jettision -->
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.arquillian.junit</groupId>
      <artifactId>arquillian-junit-container</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.shrinkwrap.resolver</groupId>
      <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
      <version>${shrinkwrap.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.10.19</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>jboss-javaee-7.0-with-resteasy</artifactId>
        <version>${wildfly.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.jboss.arquillian.junit</groupId>
        <artifactId>arquillian-junit-container</artifactId>
        <version>${arquillan.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-help-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>${war.plugin.version}</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler.plugin.version}</version>
        <configuration>
          <compilerVersion>${project.build.sourceLevel}</compilerVersion>
          <source>${project.build.sourceLevel}</source>
          <target>${project.build.targetLevel}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
          <showDeprecation>true</showDeprecation>
          <showWarnings>true</showWarnings>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.6.1</version>
        <executions>
          <!-- Delete previously unpacked wildfly - don't do for child projects. -->
          <execution>
            <id>delete-wildfly</id>
            <phase>clean</phase>
            <inherited>false</inherited>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
              <filesets>
                <fileset>
                  <directory>${wildfly.home}</directory>
                  <followSymlinks>false</followSymlinks>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-wildfly</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.wildfly</groupId>
                  <artifactId>wildfly-dist</artifactId>
                  <version>${wildfly.version}</version>
                  <type>zip</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${wildfly.unpackDir}</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <!-- Add a new test source directory to our build -->
          <execution>
            <id>add-integration-test-sources</id>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <!-- Configure the source directory of our integration tests -->
              <sources>
                <source>src/integration-test/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. 
          It has no influence on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <versionRange>[2.8,)</versionRange>
                    <goals>
                      <goal>unpack</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <versionRange>[1.9.1,)</versionRange>
                    <goals>
                      <goal>add-test-source</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <profiles>
    <profile>
      <id>wildfly</id>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.jboss.spec</groupId>
            <artifactId>jboss-javaee-7.0</artifactId>
            <version>${wildfly.plugin.version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <build>
        <!-- This is the name used by Wildfly as the context root -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>${wildfly.plugin.version}</version>
            <configuration>
              <force>true</force>
              <name>${project.artifactId}</name>
              <jbossHome>${wildfly.home}</jbossHome>
              <modulesPath>${wildfly.home}/modules</modulesPath>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>wildfly-arq</id>
      <dependencies>
        <dependency>
          <groupId>org.wildfly</groupId>
          <artifactId>wildfly-arquillian-container-embedded</artifactId>
          <version>${wildfly.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.wildfly</groupId>
          <artifactId>wildfly-embedded</artifactId>
          <version>${wildfly.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.jboss.arquillian</groupId>
            <artifactId>arquillian-bom</artifactId>
            <version>${arquillan.version}</version>
            <scope>import</scope>
            <type>pom</type>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <build>
        <!-- This is the name used by Wildfly as the context root -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.18.1</version>
            <executions>
              <execution>
                <id>integration-tests</id>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <systemPropertyVariables>
                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    <jboss.home>${wildfly.home}</jboss.home>
                    <module.path>${wildfly.home}/modules</module.path>
                  </systemPropertyVariables>
                  <redirectTestOutputToFile>false</redirectTestOutputToFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <modules>
    <module>availability-service</module>
    <module>appointment-service</module>
    <module>user-service</module>
    <module>user-domain</module>
    <module>representation-support</module>
    <module>client-support</module>
  </modules>
</project>