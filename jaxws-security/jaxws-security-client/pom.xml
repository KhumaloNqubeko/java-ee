<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>name.abhijitsarkar.learning.webservices.jaxws.security</groupId>
    <artifactId>jaxws-security</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>jaxws-security-client</artifactId>
  <name>jaxws-security-client</name>
  <packaging>war</packaging>

  <description>
   JAX-WS security client code.  The following are needed in order for the client to work.
   c.f. http://www.ibm.com/developerworks/java/library/j-jws10/index.html
    <![CDATA[
    Username token client:
    
    1) Copy the WSDL used to generate the client side code artifacts 
      and rename to <wsdl-name>.xml. It is known as the service file.
      It may be placed anywhere in the project.
      
    2) Change the policy section to suit the client. Note that the namespaces
      are different from the server. In this project, a username/password validator is configured;
      however, username/password can be hard-coded too as shown below:
      
      <sc:CallbackHandlerConfiguration wspp:visibility="private">
      <sc:CallbackHandler default="wsitUser" name="usernameHandler"/>
      <sc:CallbackHandler default="changeit" name="passwordHandler"/>
      </sc:CallbackHandlerConfiguration>
       
    3) Create a file called wsit-client.xml and put it in a root directory that's on the classpath 
     or in a META-INF directory such that the parent directory of META-INF is on the classpath.
    4) Reference the service file from the wsit-client.
    
    5) This project uses CDI for Service lookup. Thus an empty beans.xml is 
      placed under WEB-INF.
      
    6) The REST resource is annotated accordingly for CDI to do the DI.
    
    Symmetric binding client:
    
    1) Copy the WSDL used to generate the client side code artifacts 
      and rename to <wsdl-name>.xml. It is known as the service file.
      It may be placed anywhere in the project.
    2) Create a public/private key pair in a new keystore/truststore file. 
    Put it under src/main/resources/META-INF.
    
    The steps to generate the keypair are as follows:
    
    keytool -genkeypair -alias calcenc -keyalg RSA -dname "CN=Abhijit Sarkar,O=home,C=us" -keypass password -keystore ./calcenc-client-store.jceks -storepass password -storetype JCEKS

    keytool -exportcert -v -alias calcenc -file ./calcenc-client.cer -keystore calcenc-client-store.jceks -storepass password -storetype JCEKS

    keytool -importcert -alias calcenc-server -file ./calcenc-server.cer -keypass password -noprompt -trustcacerts -storetype JCEKS -keystore ./calcenc-client-store.jceks -storepass password
    
    This page provides useful information about the algorithm suites.
    https://access.redhat.com/site/documentation/en-US/JBoss_Fuse/6.0/html/Web_Services_Security_Guide/files/MsgProtect-SOAP-SpecifyAlgorithmSuite.html
    
    3) Export the public key certificate and copy to the client project. The server will need
      to import it as part of the deal. 
           
    4) Import the server certificate in the newly created keystore.
      
    5) Change the policy section to suit the client. Note that the namespaces
      are different from the server. In this project, a symmetric binding is used. 
      An ephemeral key is generated by the client
      and sent to the server as part of the request, using asymmetric encryption with the 
      server public key to secure the symmetric key.  
      
    6) The rest of the steps are the same as the username token client.
    
    ]]>
  </description>

  <dependencies>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>wsimport</id>
      <build>
        <defaultGoal>clean generate-sources</defaultGoal>
        <plugins>
          <plugin>
            <groupId>org.jvnet.jax-ws-commons</groupId>
            <artifactId>jaxws-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>wsimport-calculator-ut-client</id>
                <goals>
                  <goal>wsimport</goal>
                </goals>
                <phase>generate-sources</phase>
                <configuration>
                  <packageName>name.abhijitsarkar.learning.webservices.jaxws.security.client.ut.generated</packageName>
                  <wsdlDirectory>src/main/resources/wsdl</wsdlDirectory>
                  <wsdlFiles>
                    <wsdlFile>calculator-ut.wsdl</wsdlFile>
                  </wsdlFiles>
                  <!-- This determines @WebService.wsdlLocation and @WebServiceClient.wsdlLocation 
                    value. -->
                  <wsdlLocation>http://localhost:8080/calculator-ut/CalculatorUTService?wsdl</wsdlLocation>
                  <!-- Turn off generated source compilation; Maven will do it anyway -->
                  <xnocompile>true</xnocompile>
                </configuration>
              </execution>
              <execution>
                <id>wsimport-calculator-enc-client</id>
                <goals>
                  <goal>wsimport</goal>
                </goals>
                <phase>generate-sources</phase>
                <configuration>
                  <packageName>name.abhijitsarkar.learning.webservices.jaxws.security.client.enc.generated</packageName>
                  <wsdlDirectory>src/main/resources/wsdl</wsdlDirectory>
                  <wsdlFiles>
                    <wsdlFile>calculator-enc.wsdl</wsdlFile>
                  </wsdlFiles>
                  <!-- This determines @WebService.wsdlLocation and @WebServiceClient.wsdlLocation 
                    value. -->
                  <wsdlLocation>http://localhost:8080/calculator-enc/CalculatorEncService?wsdl</wsdlLocation>
                  <!-- Turn off generated source compilation; Maven will do it anyway -->
                  <xnocompile>true</xnocompile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>