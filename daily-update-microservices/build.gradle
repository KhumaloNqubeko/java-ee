buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${project['spring.boot.version']}",
                "com.bmuschko:gradle-docker-plugin:${project['plugin.docker.version']}"
        )
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

allprojects {
    apply plugin: 'idea'

    group = 'name.abhijitsarkar.javaee'
    version = '1.0-SNAPSHOT'

    apply from: "${project['gradle-common.url']}"
}

subprojects {
    apply plugin: 'war'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'spring-boot'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            // Last one wins if multiple bom declare the same dependency but with different versions
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${project['spring.cloud.parent.version']}"
            mavenBom "org.springframework.cloud:spring-cloud-netflix:${project['spring.cloud.version']}"
            mavenBom "org.springframework.cloud:spring-cloud-config:${project['spring.cloud.config.version']}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${project['spring.boot.version']}"
        }

        dependencies {
            "org.springframework:spring-webmvc:${project['spring.version']}"
            "org.springframework.boot:spring-boot:${project['spring.boot.version']}"

            dependencySet(group: 'com.fasterxml.jackson.core', version: "${project['jackson.version']}") {
                entry 'jackson-core'
                entry 'jackson-databind'
                entry 'jackson-annotations'
            }

            dependencySet(group: 'com.netflix.feign', version: "${project['feign.version']}") {
                entry 'feign-core'
                entry 'feign-ribbon'
                entry 'feign-slf4j'
            }
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.cloud:spring-cloud-starter')
        compile('org.springframework.cloud:spring-cloud-starter-eureka')
//        compile('org.springframework.cloud:spring-cloud-starter-hystrix')
        compile('org.springframework.cloud:spring-cloud-starter-feign')
        compile('org.springframework.cloud:spring-cloud-starter-config')
        compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${project['jackson.version']}")
        compile project(':commons')

        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
        providedCompile("org.projectlombok:lombok:${project['lombok.version']}")
    }

    springBoot {
        mainClass = project['main-class']
    }

    bootRun {
        def additionalProps = ['HTTP_PORT', 'DISCOVERY_HOST', 'DISCOVERY_PORT', 'DISCOVERY_USERNAME',
                               'DISCOVERY_PASSWORD', 'CONFIG_HOST', 'CONFIG_PORT', 'SPRING_PROFILES_ACTIVE']
                .collectEntries { [(it as String): System.properties[it]] }
                .findAll { it.value }

        systemProperties = System.env + additionalProps
    }

    docker {
        if (System.env.DOCKER_HOST) {
            url = "${System.env.DOCKER_HOST}".replace("tcp", "https")
            if (System.env.DOCKER_CERT_PATH) {
                certPath = file(System.env.DOCKER_CERT_PATH)
            }
        } else {
            url = 'unix:///var/run/docker.sock'
        }
    }

    task copyInitScript(type: Copy) {
        from(rootDir) {
            include 'init.sh'
        }
        into(new File(projectDir, "build"))
    }

    task buildDockerImage(type: DockerBuildImage, dependsOn: ['copyInitScript', 'war']) {
        inputDir = projectDir
        tag = project['docker-tag']
    }
}
